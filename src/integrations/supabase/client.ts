
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lhsnzdonofweltzjpguf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxoc256ZG9ub2Z3ZWx0empwZ3VmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ2OTMzMzcsImV4cCI6MjA2MDI2OTMzN30.KXDQ4Nt8rbRG_vjAU3cMrBD1vAhEhxlcZ338SFuZyx8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: localStorage
  }
});

// Helper function to hash passwords - in a real app, use a proper library
export const hashPassword = async (password: string): Promise<string> => {
  // This is a simple hash function for demonstration purposes
  // In a production app, use bcrypt or another secure hashing algorithm
  const encoder = new TextEncoder();
  const data = encoder.encode(password);
  const hashBuffer = await crypto.subtle.digest('SHA-256', data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
  
  console.log('Password hash details:');
  console.log('- Input password length:', password.length);
  console.log('- Generated hash:', hashHex);
  console.log('- Hash length:', hashHex.length);
  
  return hashHex;
};

// Helper function to verify passwords with more detailed logging
export const verifyPassword = async (password: string, hashedPassword: string): Promise<boolean> => {
  try {
    const hashedInput = await hashPassword(password);
    
    // Add detailed debugging for password verification
    console.log('Password verification details:');
    console.log('- Input password length:', password.length);
    console.log('- Input hash:', hashedInput);
    console.log('- Stored hash:', hashedPassword);
    console.log('- Match result:', hashedInput === hashedPassword);
    console.log('- Hash lengths match:', hashedInput.length === hashedPassword.length);
    
    return hashedInput === hashedPassword;
  } catch (error) {
    console.error('Password verification error:', error);
    return false;
  }
};
