
import { supabase } from '@/integrations/supabase/client';
import { v4 as uuidv4 } from 'uuid';
import { calculateEventDuration } from '../utils/durationCalculator';
import { fetchCourseDetails, fetchUserDetails } from '../utils/userDataFetcher';
import { EventMetadata } from '../types/calendarEventTypes';

export const createRecurringEvents = async (
  courseId: string,
  studentId: string,
  teacherId: string,
  availabilitySlotData?: any,
  courseData?: any
): Promise<boolean> => {
  try {
    console.log('Creating recurring events for enrollment:', { courseId, studentId, teacherId, availabilitySlotData });
    
    if (!availabilitySlotData?.availabilitySlotId || 
        availabilitySlotData.dayOfWeek === undefined || 
        !availabilitySlotData.startTime || 
        !availabilitySlotData.endTime) {
      console.error('Invalid availability slot data provided for recurring course');
      return false;
    }

    const eventDurationMinutes = await calculateEventDuration(courseId);
    const course = await fetchCourseDetails(courseId);
    const teacher = await fetchUserDetails(teacherId);
    const student = await fetchUserDetails(studentId);

    if (!course || !teacher || !student) {
      console.error('Failed to fetch required data for event creation');
      return false;
    }

    const eventsToCreate = [];
    const totalSessions = 4;
    
    console.log(`Creating ${totalSessions} sessions with duration ${eventDurationMinutes} minutes`);
    
    const [startHour, startMinute] = availabilitySlotData.startTime.split(':').map(Number);
    
    for (let sessionIndex = 0; sessionIndex < totalSessions; sessionIndex++) {
      const today = new Date();
      const targetDayOfWeek = availabilitySlotData.dayOfWeek;
      
      let daysUntilTarget = (targetDayOfWeek - today.getDay() + 7) % 7;
      if (daysUntilTarget === 0 && today.getHours() > startHour) {
        daysUntilTarget = 7;
      }
      
      const totalDaysFromToday = daysUntilTarget + (sessionIndex * 7);
      
      const sessionDate = new Date(today);
      sessionDate.setDate(today.getDate() + totalDaysFromToday);
      
      const startTime = new Date(sessionDate);
      startTime.setHours(startHour, startMinute, 0, 0);
      
      const endTime = new Date(startTime);
      endTime.setMinutes(endTime.getMinutes() + eventDurationMinutes);

      console.log(`Session ${sessionIndex + 1}: ${startTime.toISOString()} to ${endTime.toISOString()}`);

      const baseMetadata: EventMetadata = {
        courseId,
        studentId,
        teacherId,
        courseType: course.course_type,
        courseTitle: course.title,
        courseSkill: course.skill,
        courseLevel: course.level,
        studentName: `${student.first_name} ${student.last_name}`,
        teacherName: `${teacher.first_name} ${teacher.last_name}`,
        isAutoGenerated: true,
        sessionNumber: sessionIndex + 1,
        totalSessions: totalSessions,
        durationMinutes: eventDurationMinutes,
        replacesAvailabilitySlot: availabilitySlotData.availabilitySlotId,
        originalSlotTime: `${availabilitySlotData.startTime}-${availabilitySlotData.endTime}`,
        dayOfWeek: availabilitySlotData.dayOfWeek
      };

      // Create ONE event per session that includes both participants
      const sessionEvent = {
        id: uuidv4(),
        user_id: teacherId, // Primary user is the teacher
        event_type: 'class',
        title: `${course.title} - Session ${sessionIndex + 1}`,
        description: `${course.course_type} ${course.skill} class (${course.level}) - Teacher: ${teacher.first_name} ${teacher.last_name}, Student: ${student.first_name} ${student.last_name}`,
        start_time: startTime.toISOString(),
        end_time: endTime.toISOString(),
        metadata: baseMetadata
      };

      eventsToCreate.push(sessionEvent);
    }

    console.log(`About to insert ${eventsToCreate.length} events (${totalSessions} sessions total)`);

    const { error: insertError } = await supabase
      .from('user_events')
      .insert(eventsToCreate);

    if (insertError) {
      console.error('Error creating calendar events:', insertError);
      return false;
    }

    console.log(`Successfully created ${eventsToCreate.length} calendar events for ${totalSessions} recurring sessions`);
    return true;

  } catch (error) {
    console.error('Error in createRecurringEvents:', error);
    return false;
  }
};
