
import { supabase } from '@/integrations/supabase/client';
import { v4 as uuidv4 } from 'uuid';
import { calculateEventDuration } from '../utils/durationCalculator';
import { fetchCourseDetails, fetchUserDetails } from '../utils/userDataFetcher';
import { EventMetadata } from '../types/calendarEventTypes';

export const createOneTimeEvents = async (
  courseId: string,
  studentId: string,
  teacherId?: string,
  courseData?: any
): Promise<boolean> => {
  try {
    console.log('Creating one-time events for enrollment:', { courseId, studentId, teacherId });

    const eventDurationMinutes = await calculateEventDuration(courseId);
    const course = await fetchCourseDetails(courseId);

    if (!course) {
      console.error('Error fetching course details');
      return false;
    }

    const effectiveTeacherId = teacherId || (course.instructor_ids && course.instructor_ids[0]);
    
    if (!effectiveTeacherId) {
      console.log('No teacher available for one-time course');
      return false;
    }

    const teacher = await fetchUserDetails(effectiveTeacherId);
    const student = await fetchUserDetails(studentId);

    if (!teacher || !student) {
      console.error('Error fetching user details');
      return false;
    }

    const eventDate = new Date();
    eventDate.setDate(eventDate.getDate() + 7);
    eventDate.setHours(14, 0, 0, 0);

    const endTime = new Date(eventDate);
    endTime.setMinutes(endTime.getMinutes() + eventDurationMinutes);

    const eventsToCreate = [];

    console.log(`Creating one-time event with duration: ${eventDurationMinutes} minutes`);

    const baseMetadata: EventMetadata = {
      courseId,
      studentId,
      teacherId: effectiveTeacherId,
      courseType: course.course_type,
      courseTitle: course.title,
      studentName: `${student.first_name} ${student.last_name}`,
      teacherName: `${teacher.first_name} ${teacher.last_name}`,
      isAutoGenerated: true,
      isOneTime: true,
      durationMinutes: eventDurationMinutes
    };

    const teacherEvent = {
      id: uuidv4(),
      user_id: effectiveTeacherId,
      event_type: 'class',
      title: `${course.title} - ${student.first_name} ${student.last_name}`,
      description: `${course.course_type} class with student ${student.first_name} ${student.last_name}`,
      start_time: eventDate.toISOString(),
      end_time: endTime.toISOString(),
      metadata: baseMetadata
    };

    const studentEvent = {
      id: uuidv4(),
      user_id: studentId,
      event_type: 'class',
      title: `${course.title} - with ${teacher.first_name} ${teacher.last_name}`,
      description: `${course.course_type} class with teacher ${teacher.first_name} ${teacher.last_name}`,
      start_time: eventDate.toISOString(),
      end_time: endTime.toISOString(),
      metadata: baseMetadata
    };

    eventsToCreate.push(teacherEvent, studentEvent);

    console.log('About to insert', eventsToCreate.length, 'one-time events');

    const { error: insertError } = await supabase
      .from('user_events')
      .insert(eventsToCreate);

    if (insertError) {
      console.error('Error creating calendar events:', insertError);
      return false;
    }

    console.log(`Successfully created ${eventsToCreate.length} calendar events for one-time enrollment`);
    return true;

  } catch (error) {
    console.error('Error in createOneTimeEvents:', error);
    return false;
  }
};
