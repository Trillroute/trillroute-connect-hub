
import { supabase } from '@/integrations/supabase/client';

/**
 * Remove duplicate calendar events for a specific enrollment
 */
export const cleanupDuplicateEvents = async (
  courseId: string,
  studentId: string,
  teacherId?: string
) => {
  try {
    console.log('Cleaning up duplicate events for enrollment:', { courseId, studentId, teacherId });

    // Build the metadata filter based on available parameters
    const metadataFilter: any = { 
      courseId, 
      studentId, 
      isAutoGenerated: true 
    };
    
    if (teacherId) {
      metadataFilter.teacherId = teacherId;
    }

    // Find all events for this enrollment
    const { data: events, error: fetchError } = await supabase
      .from('user_events')
      .select('id, user_id, start_time, metadata')
      .eq('event_type', 'class')
      .contains('metadata', metadataFilter);

    if (fetchError) {
      console.error('Error fetching events for cleanup:', fetchError);
      return false;
    }

    if (!events || events.length === 0) {
      console.log('No existing events found for cleanup');
      return true;
    }

    console.log(`Found ${events.length} existing events for this enrollment, deleting all`);
    
    // Delete all existing events for this enrollment
    const eventIds = events.map(event => event.id);
    
    const { error: deleteError } = await supabase
      .from('user_events')
      .delete()
      .in('id', eventIds);

    if (deleteError) {
      console.error('Error deleting existing events:', deleteError);
      return false;
    }

    console.log(`Successfully deleted ${eventIds.length} existing events`);
    return true;
  } catch (error) {
    console.error('Error in cleanupDuplicateEvents:', error);
    return false;
  }
};
