import { supabase } from '@/integrations/supabase/client';

/**
 * Remove duplicate calendar events for a specific enrollment
 */
export const cleanupDuplicateEvents = async (
  courseId: string,
  studentId: string,
  teacherId?: string
) => {
  try {
    console.log('Cleaning up duplicate events for enrollment:', { courseId, studentId, teacherId });

    // Find all events for this enrollment
    const { data: events, error: fetchError } = await supabase
      .from('user_events')
      .select('id, user_id, start_time, metadata')
      .eq('event_type', 'class')
      .contains('metadata', { courseId, studentId, isAutoGenerated: true });

    if (fetchError) {
      console.error('Error fetching events for cleanup:', fetchError);
      return false;
    }

    if (!events || events.length === 0) {
      console.log('No events found for cleanup');
      return true;
    }

    // Group events by user_id and start_time to identify duplicates
    const eventGroups: Record<string, any[]> = {};
    
    events.forEach(event => {
      const key = `${event.user_id}-${event.start_time}`;
      if (!eventGroups[key]) {
        eventGroups[key] = [];
      }
      eventGroups[key].push(event);
    });

    // Find duplicate events (keep the first one, remove the rest)
    const eventsToDelete: string[] = [];
    
    Object.values(eventGroups).forEach(group => {
      if (group.length > 1) {
        // Keep the first event, mark the rest for deletion
        for (let i = 1; i < group.length; i++) {
          eventsToDelete.push(group[i].id);
        }
      }
    });

    if (eventsToDelete.length > 0) {
      console.log(`Deleting ${eventsToDelete.length} duplicate events`);
      
      const { error: deleteError } = await supabase
        .from('user_events')
        .delete()
        .in('id', eventsToDelete);

      if (deleteError) {
        console.error('Error deleting duplicate events:', deleteError);
        return false;
      }

      console.log(`Successfully deleted ${eventsToDelete.length} duplicate events`);
    } else {
      console.log('No duplicate events found');
    }

    return true;
  } catch (error) {
    console.error('Error in cleanupDuplicateEvents:', error);
    return false;
  }
};
